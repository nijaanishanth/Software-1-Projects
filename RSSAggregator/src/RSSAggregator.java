
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Nijaa Nishanth
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // HTML output for channel
        out.println("<html><head><title>" + channel.label()
                + "</title></head><body>");

        // HTML output for title and link
        XMLTree title = channel.child(getChildElement(channel, "title")),
                link = channel.child(getChildElement(channel, "link"));
        if (title.numberOfChildren() > 0) {
            out.println("<h1><channel><a href =" + link.child(0) + ">"
                    + title.child(0) + "</a></h1>");
        } else {
            out.println("<h1>Empty Title<channel>" + link.child(0) + "</h1>");
        }

        // HTML output for description
        XMLTree desc = channel.child(getChildElement(channel, "description"));
        out.println("<p>");
        if (desc.numberOfChildren() > 0) {
            out.println(desc);
        } else {
            out.println("No description.");
        }
        out.println("<p>");

        // HTML output for table header
        out.println("<table border=\"1\">");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // prints closing tags
        out.println("</table>");
        out.println("</body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1, i = 0, children = xml.numberOfChildren();
        // while loop to look for first occurence
        while (i < children) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
                i = children;
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // rows
        out.println("<tr>");

        // published date
        int pubDateIndex = getChildElement(item, "pubDate");
        String pubDateString = "published date unavailable";
        if (pubDateIndex > -1) {
            pubDateString = item.child(pubDateIndex).child(0).label();
        }
        out.println("<td>" + pubDateString + "</td>");

        // source
        int sourceIndex = getChildElement(item, "source");
        String sourceString = "No source available";
        if (sourceIndex > -1) {
            XMLTree source = item.child(sourceIndex);
            sourceString = "<a href=\"" + source.attributeValue("url") + "\">"
                    + source.child(0).label() + "</a>";
        }
        out.println("<td>" + sourceString + "</td>");

        // news column
        int titleIndex = getChildElement(item, "title");
        int descIndex = getChildElement(item, "description");
        int linkIndex = getChildElement(item, "link");
        String news = "No title or description available";
        XMLTree title = item.child(titleIndex);
        XMLTree desc = item.child(descIndex);
        XMLTree link = item.child(linkIndex);
        if (titleIndex > -1 && title.numberOfChildren() > 0) {
            news = title.label();
        } else if (descIndex > -1 && desc.numberOfChildren() > 0) {
            news = item.child(descIndex).child(0).label();
        }
        if (linkIndex > -1) {
            news = "<a href=\"" + link.label() + "\">" + news + "</a>";
        }

        out.println("<td>" + news + "</td>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        SimpleWriter fileOut = new SimpleWriter1L(file);
        // HTML output for each RSS url
        XMLTree xml = new XMLTree1(url);
        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {
            XMLTree channel = xml.child(0);
            outputHeader(channel, fileOut);
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                XMLTree item = channel.child(i);
                if (item.label().equals("item")) {
                    processItem(item, fileOut);
                }
            }
            outputFooter(fileOut);
        } else {
            out.println("Not an RSS file");
        }
        fileOut.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // ask user for url and output file
        out.println("Enter a URL of an XML File with a list of RSS feeds ");
        String url = in.nextLine();

        out.println("Enter the name of the output file: ");
        String file = in.nextLine();
        SimpleWriter fileOut = new SimpleWriter1L(file);

        // HTML output for index page
        XMLTree feeds = new XMLTree1(url);
        fileOut.println("<html><head><title>" + feeds.attributeValue("title")
                + "</title></head><body>");
        fileOut.println("<h2>" + feeds.attributeValue("title") + "</h2>");
        fileOut.println("<ul>");
        for (int i = 0; i < feeds.numberOfChildren(); i++) {
            XMLTree feed = feeds.child(i);
            String feedURL = feed.attributeValue("url");
            String feedName = feed.attributeValue("name");
            String feedFile = feed.attributeValue("file");

            fileOut.println("<li><a href=\"" + feedFile + "\">" + feedName
                    + "</a></li>");

            processFeed(feedURL, feedFile, out);
        }
        fileOut.println("</ul>");
        fileOut.println("</body></html>");

        // close files
        in.close();
        out.close();
        fileOut.close();
    }
}